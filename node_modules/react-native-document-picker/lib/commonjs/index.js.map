{"version":3,"sources":["index.tsx"],"names":["types","perPlatformTypes","Platform","OS","RNDocumentPicker","NativeModules","pickDirectory","Promise","resolve","pickMultiple","opts","options","allowMultiSelection","pick","pickSingle","then","results","type","allFiles","newOpts","presentationStyle","Array","isArray","doPick","every","length","includes","mode","TypeError","copyTo","releaseSecureAccess","uris","uri","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","Error","nativeModuleErrorInstance","code"],"mappings":"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","sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  fileCopyUri: string\n  copyError?: string\n  type: string\n  name: string\n  size: number\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport function pickDirectory(): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'android' || Platform.OS === 'windows') {\n    return RNDocumentPicker.pickDirectory()\n  } else {\n    // TODO iOS impl\n    return Promise.resolve(null)\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"]}